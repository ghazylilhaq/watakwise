// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image    String?
  accounts Account[]
  sessions Session[]
  contents Content[]
  personalities Personality[]
}

model PersonalityCategory {
  id    String    @id @default(cuid())
  title     String @unique
  description String?
  isActive Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime?
  personalities Personality[]

}

model Personality {
  id            String            @id @default(cuid())
  name          String            @unique
  description   String?
  image         String?
  category      PersonalityCategory @relation(fields: [categoryTitle], references: [title])
  categoryTitle String
  users         User[]            // Define the many-to-many relationship
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?


}

model ContentCategory {
  id    String    @id @default(cuid())
  title     String @unique
  description String
  createdAt DateTime @default(now())
  contents Content[]
}

model Content {
  id    String    @id @default(cuid())
  title     String
  description String
  contentCategoryTitle String
  contentCategory ContentCategory @relation(fields: [contentCategoryTitle], references: [title])
  createdAt DateTime @default(now())
  updatedAt DateTime?
  userId String
  user User @relation(fields: [userId], references: [id])
  @@unique([userId, contentCategoryTitle])
}